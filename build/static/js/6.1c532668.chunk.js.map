{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","components/quotes/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","trim","onAddQuote","author","text","alert","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC8E/BC,EA3EG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,mBACjBC,EAAeD,mBA6BrB,OACE,qCACE,cAAC,IAAD,CACEE,KAAML,EACNM,QAAS,SAACC,GAAD,MACP,2EAGJ,cAAC,EAAD,UACE,uBACEC,QArCoB,WAC1BP,GAAc,IAqCRP,UAAWC,IAAQc,KACnBC,SA/BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAEZ,KAAzBF,EAAcI,QAAwC,KAAvBD,EAAYC,QAI/Cf,EAAeY,QAAQC,MAAQ,GAC/BX,EAAaU,QAAQC,MAAQ,GAE7BtB,EAAMyB,WAAW,CAAEC,OAAQN,EAAeO,KAAMJ,KAN9CK,MAAM,+BAqBJ,UAKG5B,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKR,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKV,UAAWC,IAAQoC,QAAxB,SACE,wBACEC,QArDkB,WAC5B/B,GAAc,IAqDJ0B,KAAK,SACLjC,UAAU,MAHZ,kC,gBCxCGuC,UArBf,SAAkBxC,GAChB,MAAgCyC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAchB,OAZAC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,aAEd,CAACJ,EAAQC,IASV,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBnB,WAPtB,SAACwB,GACvBN,EAAYM","file":"static/js/6.1c532668.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__jFvCN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3DiWr\",\"loading\":\"QuoteForm_loading__1uAql\",\"control\":\"QuoteForm_control__3VWZN\",\"actions\":\"QuoteForm_actions__1ZRw1\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  const formFocussedHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    if (enteredAuthor.trim() === \"\" || enteredText.trim() === \"\") {\n      alert(\"Please enter full details!\");\n      return;\n    }\n    authorInputRef.current.value = \"\";\n    textInputRef.current.value = \"\";\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n\n    // optional: Could validate here\n  }\n\n  // Execute the prompt \"when\" isEntering is true;\n  return (\n    <>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave this page. All your data will be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocussedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"6\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button\n              onClick={finishEnteringHandler}\n              type=\"submit\"\n              className=\"btn\"\n            >\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from \"react\";\r\nimport QuoteForm from \"./QuoteForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nfunction NewQuote(props) {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n\r\n    // history.push(\"/quotes\"); // Programmatic Navigation  (with the help of useHistory)  // it pushes a new page on the stack of pages.\r\n  };\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\r\n  );\r\n}\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}