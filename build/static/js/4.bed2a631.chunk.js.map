{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","addedComment","useEffect","LoadingSpinner","form","onSubmit","event","preventDefault","quoteObj","quoteId","commentData","current","value","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","params","useParams","useCallback","length","onClick","QuoteDetail","getSingleQuote","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/4.bed2a631.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1Edue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1wR2W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__HCRnS\",\"loading\":\"NewCommentForm_loading__344Qu\",\"control\":\"NewCommentForm_control__1ki0D\",\"actions\":\"NewCommentForm_actions__2WbRw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2Jg9F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__25bPh\"};","import classes from \"./HighlightedQuote.module.css\";\nconst HighlightedQuote = (props) => {\n  return (\n    <>\n      <figure className={classes.quote}>\n        <p>{props.text}</p>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n    </>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../hooks/use-http\";\nimport classes from \"./NewCommentForm.module.css\";\nimport { addComment } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n\n  const { addedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      addedComment();\n    }\n  }, [status, addedComment, error]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const quoteObj = {\n      quoteId: props.quoteId,\n      commentData: commentTextRef.current.value,\n    };\n\n    sendRequest(quoteObj);\n  };\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.comment} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllComments } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport { useCallback } from \"react\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(getAllComments, true);\n  const params = useParams();\n\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [sendRequest, params.quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedComment = useCallback(() => {\n    sendRequest(params.quoteId);\n    setIsAddingComment(false);\n  }, [sendRequest, params.quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    comments = <h3>{error}</h3>;\n  }\n\n  if (status === \"completed\" && loadedComments) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (loadedComments.length === 0 || !loadedComments) &&\n    !isAddingComment\n  ) {\n    comments = <h2 className=\"centered\">No Comments found!</h2>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={params.quoteId} addedComment={addedComment} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\r\nimport Comments from \"../comments/Comments\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = (props) => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: quote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    sendRequest(params.quoteId);\r\n  }, [sendRequest, params.quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <h3 className=\"centered focused\">{error}</h3>;\r\n  }\r\n\r\n  if (!quote.text) {\r\n    return <h3 className=\"centered\">No quote found</h3>;\r\n  }\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            {/* match.url ---> /quotes/${params.quoteId}/ */}\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        {/* match.path ---> /quotes/${params.quoteId}/ (path till now) */}\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}