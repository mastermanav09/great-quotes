{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","components/quotes/AllQuotes.js"],"names":["module","exports","QuoteItem","props","match","useRouteMatch","className","classes","item","text","author","to","url","id","QuoteList","history","useHistory","location","useLocation","queryParams","URLSearchParams","search","isSortingAscending","get","sortedQuotes","useMemo","quotes","ascending","sort","quoteA","quoteB","toLowerCase","content","list","map","quote","sorting","onClick","push","pathname","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","length","LoadingSpinner"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCsBdC,EAnBG,SAACC,GACjB,IAAMC,EAAQC,cACd,OACE,mCACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIL,EAAMM,SAEZ,qCAAaN,EAAMO,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,UAAKP,EAAMQ,IAAX,YAAkBT,EAAMU,IAAhD,mC,iBCmDOC,EAnDG,SAACX,GACjB,IAAMY,EAAUC,cACVC,EAAWC,cAEXC,EAAc,IAAIC,gBAAgBH,EAASI,QAE3CC,EACwB,QAA5BH,EAAYI,IAAI,SAAiD,OAA5BJ,EAAYI,IAAI,QAEnDC,EAAeC,mBACjB,kBApBgBC,EAoBCvB,EAAMuB,OApBCC,EAoBOL,EAnB1BI,EAAOE,MAAK,SAACC,EAAQC,GAC1B,OAAIH,EACKE,EAAOpB,KAAKsB,cAAgBD,EAAOrB,KAAKsB,cAAgB,GAAK,EAG/DF,EAAOpB,KAAKsB,cAAgBD,EAAOrB,KAAKsB,cAAgB,GAAK,KANrD,IAACL,EAAQC,IAqBxB,CAACxB,EAAMuB,OAAQJ,IAebU,EACF,oBAAI1B,UAAWC,IAAQ0B,KAAvB,SACGT,EAAaU,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVH,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMtB,SASnB,OACE,qCACE,qBAAKP,UAAWC,IAAQ6B,QAAxB,SACE,yBAAQC,QA5Be,WAE3BtB,EAAQuB,KAAK,CACXC,SAAUtB,EAASsB,SACnBlB,OAAO,SAAD,OAAWC,EAAqB,OAAS,UAwB7C,kBACQA,EAAqB,aAAe,iBAG7CU,M,iCC/CQQ,EAXO,WACpB,OACE,sBAAKlC,UAAWC,IAAQkC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMnC,UAAU,MAAMK,GAAG,aAAzB,6B,QC+BS+B,UA/BG,WAChB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEAI,EACK,oBAAI3C,UAAU,mBAAd,SAAkC2C,IAG5B,cAAXH,GAAmD,IAAxBC,EAAaI,QAAiBJ,EAI9C,YAAXD,EAEA,qBAAKxC,UAAU,WAAf,SACE,cAAC8C,EAAA,EAAD,MAKC,cAAC,EAAD,CAAW1B,OAAQqB,IAXjB,cAAC,EAAD","file":"static/js/5.086479d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2mBv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3AjA6\",\"sorting\":\"QuoteList_sorting__3HzV3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__avd0H\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\nimport { useRouteMatch } from \"react-router\";\n\nconst QuoteItem = (props) => {\n  const match = useRouteMatch();\n  return (\n    <>\n      <li className={classes.item}>\n        <figure>\n          <blockquote>\n            <p>{props.text}</p>\n          </blockquote>\n          <figcaption>{props.author}</figcaption>\n        </figure>\n        <Link className=\"btn\" to={`${match.url}/${props.id}`}>\n          View Fullscreen\n        </Link>\n      </li>\n    </>\n  );\n};\n\nexport default QuoteItem;\n","import { useHistory, useLocation } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nimport { useMemo } from \"react\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.text.toLowerCase() > quoteB.text.toLowerCase() ? 1 : -1;\n    }\n\n    return quoteA.text.toLowerCase() < quoteB.text.toLowerCase() ? 1 : -1;\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search); // is a constructor which is given by the browser to access the location object value(here 'search').\n\n  const isSortingAscending =\n    queryParams.get(\"sort\") === \"asc\" || queryParams.get(\"sort\") === null;\n\n  let sortedQuotes = useMemo(\n    () => sortQuotes(props.quotes, isSortingAscending),\n    [props.quotes, isSortingAscending]\n  );\n\n  const changeSortingHandler = () => {\n    // more-readable\n    history.push({\n      pathname: location.pathname, // /quotes (location of current page/component)\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`, // it will take query string\n    });\n\n    // history.push(\n    //   `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    // );\n  };\n\n  let content = (\n    <ul className={classes.list}>\n      {sortedQuotes.map((quote) => (\n        <QuoteItem\n          key={quote.id}\n          id={quote.id}\n          author={quote.author}\n          text={quote.text}\n        />\n      ))}\n    </ul>\n  );\n\n  return (\n    <>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      {content}\n    </>\n  );\n};\n\nexport default QuoteList;\n","import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/add-quote\">\n        Add a quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\";\r\nimport QuoteList from \"./QuoteList\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport NoQuotesFound from \"./NoQuotesFound\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (error) {\r\n    return <h3 className=\"centered focused\">{error}</h3>;\r\n  }\r\n\r\n  if (status === \"completed\" && (loadedQuotes.length === 0 || !loadedQuotes)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}